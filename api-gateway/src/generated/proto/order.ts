// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "order";

export enum Side {
  SIDE_UNSPECIFIED = 0,
  BUY = 1,
  SELL = 2,
  UNRECOGNIZED = -1,
}

export function sideFromJSON(object: any): Side {
  switch (object) {
    case 0:
    case "SIDE_UNSPECIFIED":
      return Side.SIDE_UNSPECIFIED;
    case 1:
    case "BUY":
      return Side.BUY;
    case 2:
    case "SELL":
      return Side.SELL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Side.UNRECOGNIZED;
  }
}

export function sideToJSON(object: Side): string {
  switch (object) {
    case Side.SIDE_UNSPECIFIED:
      return "SIDE_UNSPECIFIED";
    case Side.BUY:
      return "BUY";
    case Side.SELL:
      return "SELL";
    case Side.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Order {
  quantity: Long;
  price: Long;
  side: Side;
}

function createBaseOrder(): Order {
  return { quantity: Long.UZERO, price: Long.UZERO, side: 0 };
}

export const Order: MessageFns<Order> = {
  encode(message: Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.quantity.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.quantity.toString());
    }
    if (!message.price.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.price.toString());
    }
    if (message.side !== 0) {
      writer.uint32(24).int32(message.side);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.quantity = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.price = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      quantity: isSet(object.quantity) ? Long.fromValue(object.quantity) : Long.UZERO,
      price: isSet(object.price) ? Long.fromValue(object.price) : Long.UZERO,
      side: isSet(object.side) ? sideFromJSON(object.side) : 0,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (!message.quantity.equals(Long.UZERO)) {
      obj.quantity = (message.quantity || Long.UZERO).toString();
    }
    if (!message.price.equals(Long.UZERO)) {
      obj.price = (message.price || Long.UZERO).toString();
    }
    if (message.side !== 0) {
      obj.side = sideToJSON(message.side);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.quantity = (object.quantity !== undefined && object.quantity !== null)
      ? Long.fromValue(object.quantity)
      : Long.UZERO;
    message.price = (object.price !== undefined && object.price !== null) ? Long.fromValue(object.price) : Long.UZERO;
    message.side = object.side ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
