// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/trading.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "trading";

export enum Side {
  SIDE_UNSPECIFIED = 0,
  SIDE_BUY = 1,
  SIDE_SELL = 2,
  UNRECOGNIZED = -1,
}

export function sideFromJSON(object: any): Side {
  switch (object) {
    case 0:
    case "SIDE_UNSPECIFIED":
      return Side.SIDE_UNSPECIFIED;
    case 1:
    case "SIDE_BUY":
      return Side.SIDE_BUY;
    case 2:
    case "SIDE_SELL":
      return Side.SIDE_SELL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Side.UNRECOGNIZED;
  }
}

export function sideToJSON(object: Side): string {
  switch (object) {
    case Side.SIDE_UNSPECIFIED:
      return "SIDE_UNSPECIFIED";
    case Side.SIDE_BUY:
      return "SIDE_BUY";
    case Side.SIDE_SELL:
      return "SIDE_SELL";
    case Side.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PlaceLimitOrder {
  userId: Long;
  side: Side;
  price: Long;
  quantity: Long;
}

export interface OrderAccepted {
  orderId: Long;
  userId: Long;
  side: Side;
  price: Long;
  quantity: Long;
}

export interface TradeOccurred {
  takerOrderId: Long;
  makerOrderId: Long;
  quantity: Long;
  price: Long;
}

export interface WireMessage {
  /**
   * Use distinct number ranges for commands vs. events for clarity.
   * Commands: 1-100
   */
  placeLimitOrder?:
    | PlaceLimitOrder
    | undefined;
  /** Events: 101-200 */
  orderAccepted?: OrderAccepted | undefined;
  tradeOccurred?: TradeOccurred | undefined;
}

function createBasePlaceLimitOrder(): PlaceLimitOrder {
  return { userId: Long.UZERO, side: 0, price: Long.UZERO, quantity: Long.UZERO };
}

export const PlaceLimitOrder: MessageFns<PlaceLimitOrder> = {
  encode(message: PlaceLimitOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.userId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.userId.toString());
    }
    if (message.side !== 0) {
      writer.uint32(16).int32(message.side);
    }
    if (!message.price.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.price.toString());
    }
    if (!message.quantity.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.quantity.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceLimitOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceLimitOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quantity = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceLimitOrder {
    return {
      userId: isSet(object.userId) ? Long.fromValue(object.userId) : Long.UZERO,
      side: isSet(object.side) ? sideFromJSON(object.side) : 0,
      price: isSet(object.price) ? Long.fromValue(object.price) : Long.UZERO,
      quantity: isSet(object.quantity) ? Long.fromValue(object.quantity) : Long.UZERO,
    };
  },

  toJSON(message: PlaceLimitOrder): unknown {
    const obj: any = {};
    if (!message.userId.equals(Long.UZERO)) {
      obj.userId = (message.userId || Long.UZERO).toString();
    }
    if (message.side !== 0) {
      obj.side = sideToJSON(message.side);
    }
    if (!message.price.equals(Long.UZERO)) {
      obj.price = (message.price || Long.UZERO).toString();
    }
    if (!message.quantity.equals(Long.UZERO)) {
      obj.quantity = (message.quantity || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceLimitOrder>, I>>(base?: I): PlaceLimitOrder {
    return PlaceLimitOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceLimitOrder>, I>>(object: I): PlaceLimitOrder {
    const message = createBasePlaceLimitOrder();
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? Long.fromValue(object.userId)
      : Long.UZERO;
    message.side = object.side ?? 0;
    message.price = (object.price !== undefined && object.price !== null) ? Long.fromValue(object.price) : Long.UZERO;
    message.quantity = (object.quantity !== undefined && object.quantity !== null)
      ? Long.fromValue(object.quantity)
      : Long.UZERO;
    return message;
  },
};

function createBaseOrderAccepted(): OrderAccepted {
  return { orderId: Long.UZERO, userId: Long.UZERO, side: 0, price: Long.UZERO, quantity: Long.UZERO };
}

export const OrderAccepted: MessageFns<OrderAccepted> = {
  encode(message: OrderAccepted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.orderId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.orderId.toString());
    }
    if (!message.userId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.userId.toString());
    }
    if (message.side !== 0) {
      writer.uint32(24).int32(message.side);
    }
    if (!message.price.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.price.toString());
    }
    if (!message.quantity.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.quantity.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderAccepted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderAccepted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.orderId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quantity = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderAccepted {
    return {
      orderId: isSet(object.orderId) ? Long.fromValue(object.orderId) : Long.UZERO,
      userId: isSet(object.userId) ? Long.fromValue(object.userId) : Long.UZERO,
      side: isSet(object.side) ? sideFromJSON(object.side) : 0,
      price: isSet(object.price) ? Long.fromValue(object.price) : Long.UZERO,
      quantity: isSet(object.quantity) ? Long.fromValue(object.quantity) : Long.UZERO,
    };
  },

  toJSON(message: OrderAccepted): unknown {
    const obj: any = {};
    if (!message.orderId.equals(Long.UZERO)) {
      obj.orderId = (message.orderId || Long.UZERO).toString();
    }
    if (!message.userId.equals(Long.UZERO)) {
      obj.userId = (message.userId || Long.UZERO).toString();
    }
    if (message.side !== 0) {
      obj.side = sideToJSON(message.side);
    }
    if (!message.price.equals(Long.UZERO)) {
      obj.price = (message.price || Long.UZERO).toString();
    }
    if (!message.quantity.equals(Long.UZERO)) {
      obj.quantity = (message.quantity || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderAccepted>, I>>(base?: I): OrderAccepted {
    return OrderAccepted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderAccepted>, I>>(object: I): OrderAccepted {
    const message = createBaseOrderAccepted();
    message.orderId = (object.orderId !== undefined && object.orderId !== null)
      ? Long.fromValue(object.orderId)
      : Long.UZERO;
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? Long.fromValue(object.userId)
      : Long.UZERO;
    message.side = object.side ?? 0;
    message.price = (object.price !== undefined && object.price !== null) ? Long.fromValue(object.price) : Long.UZERO;
    message.quantity = (object.quantity !== undefined && object.quantity !== null)
      ? Long.fromValue(object.quantity)
      : Long.UZERO;
    return message;
  },
};

function createBaseTradeOccurred(): TradeOccurred {
  return { takerOrderId: Long.UZERO, makerOrderId: Long.UZERO, quantity: Long.UZERO, price: Long.UZERO };
}

export const TradeOccurred: MessageFns<TradeOccurred> = {
  encode(message: TradeOccurred, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.takerOrderId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.takerOrderId.toString());
    }
    if (!message.makerOrderId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.makerOrderId.toString());
    }
    if (!message.quantity.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.quantity.toString());
    }
    if (!message.price.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.price.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TradeOccurred {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTradeOccurred();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.takerOrderId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.makerOrderId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TradeOccurred {
    return {
      takerOrderId: isSet(object.takerOrderId) ? Long.fromValue(object.takerOrderId) : Long.UZERO,
      makerOrderId: isSet(object.makerOrderId) ? Long.fromValue(object.makerOrderId) : Long.UZERO,
      quantity: isSet(object.quantity) ? Long.fromValue(object.quantity) : Long.UZERO,
      price: isSet(object.price) ? Long.fromValue(object.price) : Long.UZERO,
    };
  },

  toJSON(message: TradeOccurred): unknown {
    const obj: any = {};
    if (!message.takerOrderId.equals(Long.UZERO)) {
      obj.takerOrderId = (message.takerOrderId || Long.UZERO).toString();
    }
    if (!message.makerOrderId.equals(Long.UZERO)) {
      obj.makerOrderId = (message.makerOrderId || Long.UZERO).toString();
    }
    if (!message.quantity.equals(Long.UZERO)) {
      obj.quantity = (message.quantity || Long.UZERO).toString();
    }
    if (!message.price.equals(Long.UZERO)) {
      obj.price = (message.price || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TradeOccurred>, I>>(base?: I): TradeOccurred {
    return TradeOccurred.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TradeOccurred>, I>>(object: I): TradeOccurred {
    const message = createBaseTradeOccurred();
    message.takerOrderId = (object.takerOrderId !== undefined && object.takerOrderId !== null)
      ? Long.fromValue(object.takerOrderId)
      : Long.UZERO;
    message.makerOrderId = (object.makerOrderId !== undefined && object.makerOrderId !== null)
      ? Long.fromValue(object.makerOrderId)
      : Long.UZERO;
    message.quantity = (object.quantity !== undefined && object.quantity !== null)
      ? Long.fromValue(object.quantity)
      : Long.UZERO;
    message.price = (object.price !== undefined && object.price !== null) ? Long.fromValue(object.price) : Long.UZERO;
    return message;
  },
};

function createBaseWireMessage(): WireMessage {
  return { placeLimitOrder: undefined, orderAccepted: undefined, tradeOccurred: undefined };
}

export const WireMessage: MessageFns<WireMessage> = {
  encode(message: WireMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.placeLimitOrder !== undefined) {
      PlaceLimitOrder.encode(message.placeLimitOrder, writer.uint32(10).fork()).join();
    }
    if (message.orderAccepted !== undefined) {
      OrderAccepted.encode(message.orderAccepted, writer.uint32(810).fork()).join();
    }
    if (message.tradeOccurred !== undefined) {
      TradeOccurred.encode(message.tradeOccurred, writer.uint32(818).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.placeLimitOrder = PlaceLimitOrder.decode(reader, reader.uint32());
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.orderAccepted = OrderAccepted.decode(reader, reader.uint32());
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.tradeOccurred = TradeOccurred.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireMessage {
    return {
      placeLimitOrder: isSet(object.placeLimitOrder) ? PlaceLimitOrder.fromJSON(object.placeLimitOrder) : undefined,
      orderAccepted: isSet(object.orderAccepted) ? OrderAccepted.fromJSON(object.orderAccepted) : undefined,
      tradeOccurred: isSet(object.tradeOccurred) ? TradeOccurred.fromJSON(object.tradeOccurred) : undefined,
    };
  },

  toJSON(message: WireMessage): unknown {
    const obj: any = {};
    if (message.placeLimitOrder !== undefined) {
      obj.placeLimitOrder = PlaceLimitOrder.toJSON(message.placeLimitOrder);
    }
    if (message.orderAccepted !== undefined) {
      obj.orderAccepted = OrderAccepted.toJSON(message.orderAccepted);
    }
    if (message.tradeOccurred !== undefined) {
      obj.tradeOccurred = TradeOccurred.toJSON(message.tradeOccurred);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireMessage>, I>>(base?: I): WireMessage {
    return WireMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireMessage>, I>>(object: I): WireMessage {
    const message = createBaseWireMessage();
    message.placeLimitOrder = (object.placeLimitOrder !== undefined && object.placeLimitOrder !== null)
      ? PlaceLimitOrder.fromPartial(object.placeLimitOrder)
      : undefined;
    message.orderAccepted = (object.orderAccepted !== undefined && object.orderAccepted !== null)
      ? OrderAccepted.fromPartial(object.orderAccepted)
      : undefined;
    message.tradeOccurred = (object.tradeOccurred !== undefined && object.tradeOccurred !== null)
      ? TradeOccurred.fromPartial(object.tradeOccurred)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
